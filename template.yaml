AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  hedwig-sam

  SAM Template for hedwig-sam

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 30
    Environment:
      Variables:
        COOLSMS_KEY: NCS54489A8E45515
        COOLSMS_SECRET_KEY: 26B3D45FE6EA14CB381550E398D691BB
        COOLSMS_SENDER: 16611916

Resources: 
  ##############
  # ApiGateway #
  ##############
  ApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      StageName: dev
      Auth:
        DefaultAuthorizer: TokenAuthorizer
        Authorizers:
          TokenAuthorizer:
            FunctionArn: !GetAtt AuthFunction.Arn
        ApiKeyRequired: true
        UsagePlan:
          CreateUsagePlan: PER_API
          UsagePlanName: hedwig-usage-plan
          Description: hedwig rate limiter
          Quota:
            Limit: 100
            Period: DAY
          Throttle:
            BurstLimit: 100
            RateLimit: 50
      DefinitionBody:
        swagger: "2.0"
        info:
          title: !Ref AWS::StackName
        x-amazon-apigateway-request-validators:
          all:
            validateRequestBody: true
            validateRequestParameters: true
          body-only:
            validateRequestBody: true
            validateRequestParameters: false
        paths:
          "/sms":
            post:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              x-amazon-apigateway-request-validator: body-only
              parameters:
              - in: body
                name: SmsSendBody
                required: true
                schema:
                  $ref: "#/definitions/SmsSendBody"
              responses:
                "200":
                  description: "200 response"
              x-amazon-apigateway-integration:
                credentials: !GetAtt ApiGatewayRole.Arn
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:sqs:path//"
                responses:
                  default:
                    statusCode: "200"
                    responseTemplates: 
                      application/json: '{"result": "ok"}'
                requestParameters:
                  integration.request.header.Content-Type: "'application/x-www-form-urlencoded'"
                requestTemplates:
                  application/json: !Sub "Action=SendMessage##\n&QueueUrl=$util.urlEncode('${ApiQueue}')##\n\
                    &MessageBody=$util.urlEncode($input.body)##\n"
                passthroughBehavior: "never"
                httpMethod: "POST"
                type: "aws"
        definitions:
          SmsSendBody:
            title: SmsSendBody
            type: object
            properties:
              receiver:
                type: string
              content:
                type: string
              country_code:
                type: string
            required:
              - receiver
              - content
            


  ############
  # IAM Role #
  ############              
  ApiGatewayRole:
    Type: AWS::IAM::Role
    Properties:
      Path: "/"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs
      Policies:
        - PolicyName: ApiQueuePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sqs:ReceiveMessage
                  - sqs:SendMessage
                Resource: !GetAtt ApiQueue.Arn

  #######
  # SQS #
  #######           
  ApiQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: 'hedwig-sam-sms-queue'
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt ApiQueueDLQ.Arn
        maxReceiveCount: 10

  ApiQueueDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: 'hedwig-sam-sms-dlq'


  ##########
  # Lambda #
  ##########  
  SQSHandlerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: app/
      Handler: handlers/sms_handler.send_message
      Runtime: ruby2.7
      Events:
        MySQSEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt ApiQueue.Arn
            BatchSize: 3

  AuthFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: app/
      Handler: authorizer.protect
      Runtime: ruby2.7        






